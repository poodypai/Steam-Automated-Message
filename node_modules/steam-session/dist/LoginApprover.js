"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const https_1 = __importDefault(require("https"));
const socks_proxy_agent_1 = require("socks-proxy-agent");
const stdlib_1 = __importDefault(require("@doctormckay/stdlib"));
const http_1 = require("@doctormckay/stdlib/http");
const steamid_1 = __importDefault(require("steamid"));
const AuthenticationClient_1 = __importDefault(require("./AuthenticationClient"));
const WebApiTransport_1 = __importDefault(require("./transports/WebApiTransport"));
const helpers_1 = require("./helpers");
const ESessionPersistence_1 = __importDefault(require("./enums-steam/ESessionPersistence"));
const EAuthTokenPlatformType_1 = __importDefault(require("./enums-steam/EAuthTokenPlatformType"));
class LoginApprover {
    constructor(accessToken, sharedSecret, options) {
        options = options || {};
        let mutuallyExclusiveOptions = ['localAddress', 'httpProxy', 'socksProxy', 'agent'];
        if (Object.keys(options).filter(k => mutuallyExclusiveOptions.includes(k)).length > 1) {
            throw new Error('Cannot specify more than one of localAddress, httpProxy, socksProxy, or agent at the same time');
        }
        let agent = options.agent || new https_1.default.Agent({ keepAlive: true });
        if (options.httpProxy) {
            agent = stdlib_1.default.HTTP.getProxyAgent(true, options.httpProxy);
        }
        else if (options.socksProxy) {
            agent = new socks_proxy_agent_1.SocksProxyAgent(options.socksProxy);
        }
        this._webClient = new http_1.HttpClient({
            httpsAgent: agent,
            localAddress: options.localAddress
        });
        this.accessToken = accessToken;
        this.sharedSecret = sharedSecret;
        this._handler = new AuthenticationClient_1.default({
            platformType: EAuthTokenPlatformType_1.default.MobileApp,
            transport: options.transport || new WebApiTransport_1.default(this._webClient),
            webClient: this._webClient,
            webUserAgent: (0, helpers_1.defaultUserAgent)()
        });
    }
    get steamID() {
        if (this.accessToken) {
            let decodedToken = (0, helpers_1.decodeJwt)(this.accessToken);
            return new steamid_1.default(decodedToken.sub);
        }
        else {
            return null;
        }
    }
    get accessToken() { return this._accessToken; }
    set accessToken(token) {
        let decoded = (0, helpers_1.decodeJwt)(token);
        let aud = decoded.aud || [];
        // Is it an access token and not a refresh token?
        if (aud.includes('derive')) {
            throw new Error('Provided token is a refresh token, not an access token');
        }
        if (!aud.includes('mobile')) {
            throw new Error('Provided token is not valid for MobileApp platform usage');
        }
        this._accessToken = token;
    }
    get _secretAsBuffer() {
        if (Buffer.isBuffer(this.sharedSecret)) {
            return this.sharedSecret;
        }
        if (this.sharedSecret.match(/^[0-9a-f]{40}$/i)) {
            // Looks like it's hex
            return Buffer.from(this.sharedSecret, 'hex');
        }
        // It must be base64
        return Buffer.from(this.sharedSecret, 'base64');
    }
    async getAuthSessionInfo(qrChallengeUrl) {
        let { clientId } = decodeQrUrl(qrChallengeUrl);
        let result = await this._handler.getAuthSessionInfo(this._accessToken, { clientId });
        return {
            ip: result.ip,
            location: {
                geoloc: result.geoloc,
                city: result.city,
                state: result.state
            },
            platformType: result.platformType,
            deviceFriendlyName: result.deviceFriendlyName,
            version: result.version,
            loginHistory: result.loginHistory,
            locationMismatch: result.locationMismatch,
            highUsageLogin: result.highUsageLogin,
            requestedPersistence: result.requestedPersistence
        };
    }
    async approveAuthSession(details) {
        let { clientId, version } = decodeQrUrl(details.qrChallengeUrl);
        let signatureData = Buffer.alloc(2 + 8 + 8);
        signatureData.writeUInt16LE(version, 0);
        signatureData.writeBigUInt64LE(BigInt(clientId), 2);
        signatureData.writeBigUInt64LE(BigInt(this.steamID), 10);
        let signature = (0, crypto_1.createHmac)('sha256', this._secretAsBuffer)
            .update(signatureData)
            .digest();
        await this._handler.submitMobileConfirmation(this.accessToken, {
            version,
            clientId,
            steamId: this.steamID.getSteamID64(),
            signature,
            confirm: details.approve,
            persistence: details.persistence || ESessionPersistence_1.default.Persistent
        });
    }
}
exports.default = LoginApprover;
function decodeQrUrl(qrUrl) {
    let match = qrUrl.match(/^https?:\/\/s\.team\/q\/(\d+)\/(\d+)(\?|$)/);
    if (!match) {
        throw new Error('Invalid QR code URL');
    }
    return { clientId: match[2], version: parseInt(match[1], 10) };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW5BcHByb3Zlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Mb2dpbkFwcHJvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUNBQWtDO0FBQ2xDLGtEQUEwQjtBQUMxQix5REFBa0Q7QUFDbEQsaUVBQXlDO0FBQ3pDLG1EQUFvRDtBQUNwRCxzREFBOEI7QUFFOUIsa0ZBQTBEO0FBQzFELG1GQUEyRDtBQUUzRCx1Q0FBc0Q7QUFDdEQsNEZBQW9FO0FBQ3BFLGtHQUEwRTtBQUUxRSxNQUFxQixhQUFhO0lBT2pDLFlBQVksV0FBbUIsRUFBRSxZQUEyQixFQUFFLE9BQTRCO1FBQ3pGLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO1FBRXhCLElBQUksd0JBQXdCLEdBQUcsQ0FBQyxjQUFjLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwRixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0RixNQUFNLElBQUksS0FBSyxDQUFDLGdHQUFnRyxDQUFDLENBQUM7U0FDbEg7UUFFRCxJQUFJLEtBQUssR0FBZSxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksZUFBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBRTVFLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUN0QixLQUFLLEdBQUcsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFnQixDQUFDO1NBQzFFO2FBQU0sSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQzlCLEtBQUssR0FBRyxJQUFJLG1DQUFlLENBQUMsT0FB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